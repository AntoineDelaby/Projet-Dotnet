// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetDotnet.Client.App;

#nullable disable

namespace ProjetDotnet.Client.App.Migrations
{
    [DbContext(typeof(ClientDBContext))]
    [Migration("20250312141812_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjetDotnet.Client.App.CarteBancaire", b =>
                {
                    b.Property<int>("Identifiant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifiant"));

                    b.Property<string>("CompteBancaireId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NumeroCarte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identifiant");

                    b.HasIndex("CompteBancaireId");

                    b.ToTable("CarteBancaire");

                    b.HasData(
                        new
                        {
                            Identifiant = 1,
                            CompteBancaireId = "1-1-BE-20250312-PE",
                            NumeroCarte = "4974018502231257"
                        },
                        new
                        {
                            Identifiant = 2,
                            CompteBancaireId = "2-1-AX-20250312-PR",
                            NumeroCarte = "4974018502231265"
                        },
                        new
                        {
                            Identifiant = 3,
                            CompteBancaireId = "3-1-BO-20250312-PE",
                            NumeroCarte = "4974018502231216"
                        },
                        new
                        {
                            Identifiant = 4,
                            CompteBancaireId = "4-1-PA-20250312-PR",
                            NumeroCarte = "4974018502231240"
                        },
                        new
                        {
                            Identifiant = 5,
                            CompteBancaireId = "5-1-BE-20250312-PE",
                            NumeroCarte = "4974018502231273"
                        },
                        new
                        {
                            Identifiant = 6,
                            CompteBancaireId = "6-1-PR-20250312-PR",
                            NumeroCarte = "4974018502231281"
                        },
                        new
                        {
                            Identifiant = 7,
                            CompteBancaireId = "7-1-AB-20250312-PE",
                            NumeroCarte = "4974018502231208"
                        },
                        new
                        {
                            Identifiant = 8,
                            CompteBancaireId = "8-1-ZA-20250312-PR",
                            NumeroCarte = "4974018502231224"
                        },
                        new
                        {
                            Identifiant = 9,
                            CompteBancaireId = "8-1-ZA-20250312-PR",
                            NumeroCarte = "4974018502231232"
                        });
                });

            modelBuilder.Entity("ProjetDotnet.Client.App.Clients", b =>
                {
                    b.Property<int>("Identifiant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifiant"));

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement_Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identifiant");

                    b.ToTable("Clients", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ProjetDotnet.Client.App.Entities.CompteBancaire", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOuverture")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Solde")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("CompteBancaire", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1-1-BE-20250312-PE",
                            ClientId = 1,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "2-1-AX-20250312-PR",
                            ClientId = 2,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "3-1-BO-20250312-PE",
                            ClientId = 3,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "4-1-PA-20250312-PR",
                            ClientId = 4,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "5-1-BE-20250312-PE",
                            ClientId = 5,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "6-1-PR-20250312-PR",
                            ClientId = 6,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "7-1-AB-20250312-PE",
                            ClientId = 7,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "8-1-ZA-20250312-PR",
                            ClientId = 8,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "9-1-BE-20250312-PE",
                            ClientId = 9,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "10-1-LE-20250312-PR",
                            ClientId = 10,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "11-1-AB-20250312-PE",
                            ClientId = 11,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "3-2-BO-20250312-PR",
                            ClientId = 3,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        },
                        new
                        {
                            Id = "9-2-BE-20250312-PE",
                            ClientId = 9,
                            DateOuverture = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Solde = 1000m
                        });
                });

            modelBuilder.Entity("ProjetDotnet.Client.App.ClientParticulier", b =>
                {
                    b.HasBaseType("ProjetDotnet.Client.App.Clients");

                    b.Property<DateTime>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ClientParticulier", (string)null);

                    b.HasData(
                        new
                        {
                            Identifiant = 1,
                            CodePostal = "94000",
                            Complement_Adresse = "",
                            Libelle_Adresse = "12, rue des Oliviers",
                            Mail = "bety@gmail.com",
                            Nom = "BETY",
                            Ville = "Creteil",
                            DateDeNaissance = new DateTime(1985, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Daniel",
                            Sexe = "M"
                        },
                        new
                        {
                            Identifiant = 3,
                            CodePostal = "94300",
                            Complement_Adresse = "etage 2",
                            Libelle_Adresse = "10, rue des Oliviers",
                            Mail = "bodin@gmail.com",
                            Nom = "BODIN",
                            Ville = "Vincennes",
                            DateDeNaissance = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1955),
                            Prenom = "Justin",
                            Sexe = "M"
                        },
                        new
                        {
                            Identifiant = 5,
                            CodePostal = "94120",
                            Complement_Adresse = "",
                            Libelle_Adresse = "15, rue de la Republique ",
                            Mail = "berris@gmail.com",
                            Nom = "BERRIS",
                            Ville = "FONTENAY SOUS BOIS",
                            DateDeNaissance = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1965),
                            Prenom = "Karine",
                            Sexe = "F"
                        },
                        new
                        {
                            Identifiant = 7,
                            CodePostal = "92100",
                            Complement_Adresse = "",
                            Libelle_Adresse = "25, rue de la Paix ",
                            Mail = "abenir@gmail.com",
                            Nom = "ABENIR",
                            Ville = "LA DEFENSE",
                            DateDeNaissance = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1961),
                            Prenom = "Alevandra",
                            Sexe = "F"
                        },
                        new
                        {
                            Identifiant = 9,
                            CodePostal = "93500",
                            Complement_Adresse = "",
                            Libelle_Adresse = "3, avenue des Parcs ",
                            Mail = "bensaid@gmail.com",
                            Nom = "BENSAID",
                            Ville = "ROISSY EN France",
                            DateDeNaissance = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1956),
                            Prenom = "Georgia",
                            Sexe = "F"
                        },
                        new
                        {
                            Identifiant = 11,
                            CodePostal = "93200",
                            Complement_Adresse = "",
                            Libelle_Adresse = "3, rue Lecourbe ",
                            Mail = "ababou@gmail.com",
                            Nom = "ABABOU",
                            Ville = "BAGNOLET",
                            DateDeNaissance = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1950),
                            Prenom = "Teddy",
                            Sexe = "M"
                        });
                });

            modelBuilder.Entity("ProjetDotnet.Client.App.ClientProfessionnel", b =>
                {
                    b.HasBaseType("ProjetDotnet.Client.App.Clients");

                    b.Property<string>("Codepostal_Siege")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement_AdresseSiege")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_AdresseSiege")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatutJuridique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville_Siege")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ClientProfessionnel", (string)null);

                    b.HasData(
                        new
                        {
                            Identifiant = 2,
                            CodePostal = "94120",
                            Complement_Adresse = "Digicode 1432",
                            Libelle_Adresse = "125, rue LaFayette",
                            Mail = "info@axa.fr",
                            Nom = "AXA",
                            Ville = "FONTENAY SOUS BOIS",
                            Codepostal_Siege = "94120",
                            Complement_AdresseSiege = "digicode 1432",
                            Libelle_AdresseSiege = "125,rue lafayette",
                            Siret = "12548795641122",
                            StatutJuridique = "SARL",
                            Ville_Siege = "FONTENAY SOUS BOIS"
                        },
                        new
                        {
                            Identifiant = 4,
                            CodePostal = "93500",
                            Complement_Adresse = "",
                            Libelle_Adresse = "36, quai des Orfevres",
                            Mail = "info@paul.fr",
                            Nom = "PAUL",
                            Ville = "ROISSY EN FRANCE",
                            Codepostal_Siege = "92060",
                            Complement_AdresseSiege = "",
                            Libelle_AdresseSiege = "10, esplandade de la Defense",
                            Siret = "87459564455444",
                            StatutJuridique = "EURL",
                            Ville_Siege = "LA DEFENSE"
                        },
                        new
                        {
                            Identifiant = 6,
                            CodePostal = "75002",
                            Complement_Adresse = "Bat.C",
                            Libelle_Adresse = "32, rue E. Renan ",
                            Mail = "info@primark.fr",
                            Nom = "PRIMARK",
                            Ville = "PARIS",
                            Codepostal_Siege = "75002",
                            Complement_AdresseSiege = "Bat.C",
                            Libelle_AdresseSiege = "32, rue E. Renan",
                            Siret = "08755897458455",
                            StatutJuridique = "SARL",
                            Ville_Siege = "PARIS"
                        },
                        new
                        {
                            Identifiant = 8,
                            CodePostal = "92100",
                            Complement_Adresse = "",
                            Libelle_Adresse = "23, av P. Valery ",
                            Mail = "info@zara.fr",
                            Nom = "ZARA",
                            Ville = "LA DEFENSE",
                            Codepostal_Siege = "92060",
                            Complement_AdresseSiege = " Tour Franklin",
                            Libelle_AdresseSiege = "24, esplanade de la Defense",
                            Siret = "65895874587854",
                            StatutJuridique = "SA",
                            Ville_Siege = "LA DEFENSE"
                        },
                        new
                        {
                            Identifiant = 10,
                            CodePostal = "75003",
                            Complement_Adresse = "Fond de Cour",
                            Libelle_Adresse = "15, place de la Bastille",
                            Mail = "contact@leonidas.fr",
                            Nom = "LEONIDAS",
                            Ville = "Paris",
                            Codepostal_Siege = "75008",
                            Complement_AdresseSiege = "",
                            Libelle_AdresseSiege = "10, rue de la paix",
                            Siret = "91235987456832",
                            StatutJuridique = "SAS",
                            Ville_Siege = "Paris"
                        });
                });

            modelBuilder.Entity("ProjetDotnet.Client.App.CarteBancaire", b =>
                {
                    b.HasOne("ProjetDotnet.Client.App.Entities.CompteBancaire", null)
                        .WithMany("CarteBancaires")
                        .HasForeignKey("CompteBancaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetDotnet.Client.App.ClientParticulier", b =>
                {
                    b.HasOne("ProjetDotnet.Client.App.Clients", null)
                        .WithOne()
                        .HasForeignKey("ProjetDotnet.Client.App.ClientParticulier", "Identifiant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetDotnet.Client.App.ClientProfessionnel", b =>
                {
                    b.HasOne("ProjetDotnet.Client.App.Clients", null)
                        .WithOne()
                        .HasForeignKey("ProjetDotnet.Client.App.ClientProfessionnel", "Identifiant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetDotnet.Client.App.Entities.CompteBancaire", b =>
                {
                    b.Navigation("CarteBancaires");
                });
#pragma warning restore 612, 618
        }
    }
}
